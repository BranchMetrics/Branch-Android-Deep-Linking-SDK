apply plugin: 'com.android.application'

dependencies {
//    implementation project(':Branch-SDK')
    if (false) {
        implementation ('io.branch.sdk.android:library:5.0.1')
        implementation ('com.google.android.gms:play-services-ads-identifier:17.0.0')
        implementation 'com.huawei.hms:ads-identifier:3.4.28.305'
        implementation 'com.huawei.hms:hwid:4.0.1.300'
    } else {
        implementation(name:'Branch-SDK-release', ext:'aar')
        implementation 'androidx.annotation:annotation:1.1.0'
        implementation 'com.android.installreferrer:installreferrer:1.0'
//        implementation ('com.google.android.gms:play-services-ads-identifier:17.0.0') // this wasn't explicitly mentioned on slack
        implementation 'com.huawei.hms:ads-identifier:3.4.28.305'
        implementation 'com.huawei.hms:hwid:4.0.1.300'
    }

    /* Add chrome custom tabs for guaranteed matching */
    implementation ('androidx.browser:browser:1.0.0') {
        exclude module: 'support-v4'
    }

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "io.branch.branchandroiddemo"
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_MINIMUM)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs { release }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

File propFile = file('signing.properties.sample');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
        android.buildTypes.release.signingConfig = null
}


